// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(nanoid())
  firstName     String
  lastName      String
  profilePic    String?
  email         String         @unique
  password      String?
  googleId      String?        @unique
  isOpenToGuide Boolean        @default(false)
  rating        Float          @default(0)
  numRatings    Int            @default(0)
  Blog          Blog[]
  PlansOffered  PlansOffered[]
  messagesSent    Message[]    @relation("MessageSender")
  messagesReceived Message[]   @relation("MessageReceiver")
}

model Blog {
  id       String  @id @default(nanoid())
  title    String
  text     String
  image    Image[]
  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  likes    Int @default(0)
}

model PlansOffered {
  id       String @id @default(nanoid())
  title    String
  price    Int
  location String
  guide    User   @relation(fields: [userId], references: [id])
  userId   String
}

model Image {
  id       String  @id @default(nanoid())
  imageURL String
  caption  String
  Blog     Blog?   @relation(fields: [blogId], references: [id])
  blogId   String?
}

model Message {
  id         String  @id @default(nanoid())
  text       String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime @default(now())
}